---
- hosts: all
  become: true
  tasks:

  - name: Install EPEL Repo package from standard repo
    yum:
      name: epel-release
      state: present

  - name: Install PostgreSQL Yum Repository
    yum:
      name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
      state: present

  - name: Install rpm packages for ansible PostgreSQL module
    yum:
      name: python-psycopg2
      state: present


- hosts:
    - master
    - slave
  become: true
  tasks:

  - name: Install PostgreSQL server
    yum:
      name: postgresql12-server
      state: present


- hosts: master
  become: true
  vars_files:
    - vars.yml
  tasks:

  - name: Check if PostgreSQL database is initialized
    stat:
      path: "/var/lib/pgsql/12/data/PG_VERSION"
    register: pgdata_version

  - name: PostgreSQL initdb
    become_user: postgres
    command: /usr/pgsql-12/bin/initdb -D /var/lib/pgsql/12/data
    when: not pgdata_version.stat.exists

  - name: copy PostgreSQL config files
    copy: src={{ item }} dest=/var/lib/pgsql/12/data/ owner=postgres group=postgres mode=0600
    with_fileglob:
      - "{{ ansible_hostname }}/*"

  - name: Enable PostgreSQL server
    systemd:
      name: postgresql-12
      state: started
      enabled: yes

  # create user replica with replication password 'replica';
  # select * from pg_stat_replication;
  - name: Create user replica for slave
    postgresql_user:
      name: "{{ replication_user }}"
      password: "{{ replication_pass }}"
      role_attr_flags: REPLICATION

  # select pg_create_physical_replication_slot('slave_slot');
  # select * from pg_replication_slots;
  - name: Create replication physical slot for slave
    become_user: postgres
    postgresql_slot:
      slot_name: "{{ replication_slot }}"

  # create database otus;
  - name: Create new database otus
    postgresql_db:
      name: otus

  # create table dz(k serial, v varchar)
  - name: Create table dz in the otus database
    postgresql_table:
      db: otus
      name: dz
      columns:
      - k serial primary key
      - v varchar

  # create user barman with superuser password 'barman';
  - name: Create user barman for backup
    postgresql_user:
      name: "{{ barman_user }}"
      password: "{{ barman_pass }}"
      role_attr_flags: SUPERUSER

  # create user barman_streaming with replication password 'barman_streaming';
  - name: Create user barman-streaming for backup
    postgresql_user:
      name: "{{ streaming_barman_user }}"
      password: "{{ streaming_barman_pass }}"
      role_attr_flags: REPLICATION


- hosts: slave
  become: true
  vars_files:
    - vars.yml
  tasks:

  - name: Check if PostgreSQL database is initialized
    stat:
      path: "/var/lib/pgsql/12/data/PG_VERSION"
    register: pgdata_version

  # -R Create standby.signal and append connection settings to postgresql.auto.conf
  - name: Restore PostgreSQL backup from master
    become_user: postgres
    command: /usr/pgsql-12/bin/pg_basebackup -h 192.168.11.150 -U replica -D /var/lib/pgsql/12/data/ -Xs -R
    when: not pgdata_version.stat.exists

  - name: Enable PostgreSQL server
    systemd:
      name: postgresql-12
      state: started
      enabled: yes


- hosts: backup
  become: true
  vars_files:
    - vars.yml
  tasks:

  - name: Install barman
    yum:
      name:
        - barman
        - barman-cli
        - postgresql12
      state: present

  - name: copy barman config file for master server backup (streaming-only)
    template:
      src: backup/master.conf.j2
      dest: /etc/barman.d/master.conf
      mode: '0644'

#  - name: switch wal on master
#    become_user: barman
#    command: barman switch-wal master
